// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/media_metadata/mediametadata_service.proto

package mediametadata_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateNewMediaMetadataRequest struct {
	Name                     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SiteName                 string   `protobuf:"bytes,2,opt,name=siteName,proto3" json:"siteName,omitempty"`
	Length                   int32    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Status                   int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Thumbnail                string   `protobuf:"bytes,5,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ProjectId                int32    `protobuf:"varint,6,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AwsBucketWholeMedia      string   `protobuf:"bytes,7,opt,name=awsBucketWholeMedia,proto3" json:"awsBucketWholeMedia,omitempty"`
	AwsStorageNameWholeMedia string   `protobuf:"bytes,8,opt,name=awsStorageNameWholeMedia,proto3" json:"awsStorageNameWholeMedia,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *CreateNewMediaMetadataRequest) Reset()         { *m = CreateNewMediaMetadataRequest{} }
func (m *CreateNewMediaMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNewMediaMetadataRequest) ProtoMessage()    {}
func (*CreateNewMediaMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{0}
}

func (m *CreateNewMediaMetadataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNewMediaMetadataRequest.Unmarshal(m, b)
}
func (m *CreateNewMediaMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNewMediaMetadataRequest.Marshal(b, m, deterministic)
}
func (m *CreateNewMediaMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNewMediaMetadataRequest.Merge(m, src)
}
func (m *CreateNewMediaMetadataRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNewMediaMetadataRequest.Size(m)
}
func (m *CreateNewMediaMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNewMediaMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNewMediaMetadataRequest proto.InternalMessageInfo

func (m *CreateNewMediaMetadataRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateNewMediaMetadataRequest) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *CreateNewMediaMetadataRequest) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *CreateNewMediaMetadataRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CreateNewMediaMetadataRequest) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *CreateNewMediaMetadataRequest) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *CreateNewMediaMetadataRequest) GetAwsBucketWholeMedia() string {
	if m != nil {
		return m.AwsBucketWholeMedia
	}
	return ""
}

func (m *CreateNewMediaMetadataRequest) GetAwsStorageNameWholeMedia() string {
	if m != nil {
		return m.AwsStorageNameWholeMedia
	}
	return ""
}

type MediaMetadataResponseRepeated struct {
	Data                 []*MediaMetadataResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MediaMetadataResponseRepeated) Reset()         { *m = MediaMetadataResponseRepeated{} }
func (m *MediaMetadataResponseRepeated) String() string { return proto.CompactTextString(m) }
func (*MediaMetadataResponseRepeated) ProtoMessage()    {}
func (*MediaMetadataResponseRepeated) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{1}
}

func (m *MediaMetadataResponseRepeated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaMetadataResponseRepeated.Unmarshal(m, b)
}
func (m *MediaMetadataResponseRepeated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaMetadataResponseRepeated.Marshal(b, m, deterministic)
}
func (m *MediaMetadataResponseRepeated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaMetadataResponseRepeated.Merge(m, src)
}
func (m *MediaMetadataResponseRepeated) XXX_Size() int {
	return xxx_messageInfo_MediaMetadataResponseRepeated.Size(m)
}
func (m *MediaMetadataResponseRepeated) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaMetadataResponseRepeated.DiscardUnknown(m)
}

var xxx_messageInfo_MediaMetadataResponseRepeated proto.InternalMessageInfo

func (m *MediaMetadataResponseRepeated) GetData() []*MediaMetadataResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type MediaMetadataResponse struct {
	MediaId                  int32    `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	Name                     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SiteName                 string   `protobuf:"bytes,3,opt,name=siteName,proto3" json:"siteName,omitempty"`
	Length                   int32    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Status                   int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Thumbnail                string   `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ProjectId                int32    `protobuf:"varint,7,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AwsBucketWholeMedia      string   `protobuf:"bytes,8,opt,name=awsBucketWholeMedia,proto3" json:"awsBucketWholeMedia,omitempty"`
	AwsStorageNameWholeMedia string   `protobuf:"bytes,9,opt,name=awsStorageNameWholeMedia,proto3" json:"awsStorageNameWholeMedia,omitempty"`
	Keywords                 []string `protobuf:"bytes,10,rep,name=keywords,proto3" json:"keywords,omitempty"`
	CreatedAt                int64    `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt                int64    `protobuf:"varint,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *MediaMetadataResponse) Reset()         { *m = MediaMetadataResponse{} }
func (m *MediaMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MediaMetadataResponse) ProtoMessage()    {}
func (*MediaMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{2}
}

func (m *MediaMetadataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaMetadataResponse.Unmarshal(m, b)
}
func (m *MediaMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaMetadataResponse.Marshal(b, m, deterministic)
}
func (m *MediaMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaMetadataResponse.Merge(m, src)
}
func (m *MediaMetadataResponse) XXX_Size() int {
	return xxx_messageInfo_MediaMetadataResponse.Size(m)
}
func (m *MediaMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MediaMetadataResponse proto.InternalMessageInfo

func (m *MediaMetadataResponse) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

func (m *MediaMetadataResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MediaMetadataResponse) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *MediaMetadataResponse) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *MediaMetadataResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MediaMetadataResponse) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *MediaMetadataResponse) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *MediaMetadataResponse) GetAwsBucketWholeMedia() string {
	if m != nil {
		return m.AwsBucketWholeMedia
	}
	return ""
}

func (m *MediaMetadataResponse) GetAwsStorageNameWholeMedia() string {
	if m != nil {
		return m.AwsStorageNameWholeMedia
	}
	return ""
}

func (m *MediaMetadataResponse) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *MediaMetadataResponse) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *MediaMetadataResponse) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type UpdateMediaRequest struct {
	MediaId                  int32    `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	Name                     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SiteName                 string   `protobuf:"bytes,3,opt,name=siteName,proto3" json:"siteName,omitempty"`
	Length                   int32    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Status                   int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Thumbnail                string   `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ProjectId                int32    `protobuf:"varint,7,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AwsBucketWholeMedia      string   `protobuf:"bytes,8,opt,name=awsBucketWholeMedia,proto3" json:"awsBucketWholeMedia,omitempty"`
	AwsStorageNameWholeMedia string   `protobuf:"bytes,9,opt,name=awsStorageNameWholeMedia,proto3" json:"awsStorageNameWholeMedia,omitempty"`
	CreatedAt                int64    `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *UpdateMediaRequest) Reset()         { *m = UpdateMediaRequest{} }
func (m *UpdateMediaRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMediaRequest) ProtoMessage()    {}
func (*UpdateMediaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{3}
}

func (m *UpdateMediaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMediaRequest.Unmarshal(m, b)
}
func (m *UpdateMediaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMediaRequest.Marshal(b, m, deterministic)
}
func (m *UpdateMediaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMediaRequest.Merge(m, src)
}
func (m *UpdateMediaRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMediaRequest.Size(m)
}
func (m *UpdateMediaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMediaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMediaRequest proto.InternalMessageInfo

func (m *UpdateMediaRequest) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

func (m *UpdateMediaRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateMediaRequest) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *UpdateMediaRequest) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *UpdateMediaRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateMediaRequest) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *UpdateMediaRequest) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *UpdateMediaRequest) GetAwsBucketWholeMedia() string {
	if m != nil {
		return m.AwsBucketWholeMedia
	}
	return ""
}

func (m *UpdateMediaRequest) GetAwsStorageNameWholeMedia() string {
	if m != nil {
		return m.AwsStorageNameWholeMedia
	}
	return ""
}

func (m *UpdateMediaRequest) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type GetMediaMetadataRequest struct {
	MediaId              int32    `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMediaMetadataRequest) Reset()         { *m = GetMediaMetadataRequest{} }
func (m *GetMediaMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*GetMediaMetadataRequest) ProtoMessage()    {}
func (*GetMediaMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{4}
}

func (m *GetMediaMetadataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMediaMetadataRequest.Unmarshal(m, b)
}
func (m *GetMediaMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMediaMetadataRequest.Marshal(b, m, deterministic)
}
func (m *GetMediaMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMediaMetadataRequest.Merge(m, src)
}
func (m *GetMediaMetadataRequest) XXX_Size() int {
	return xxx_messageInfo_GetMediaMetadataRequest.Size(m)
}
func (m *GetMediaMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMediaMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMediaMetadataRequest proto.InternalMessageInfo

func (m *GetMediaMetadataRequest) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

type GetProjectMediasRequest struct {
	ProjectId            int32    `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProjectMediasRequest) Reset()         { *m = GetProjectMediasRequest{} }
func (m *GetProjectMediasRequest) String() string { return proto.CompactTextString(m) }
func (*GetProjectMediasRequest) ProtoMessage()    {}
func (*GetProjectMediasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{5}
}

func (m *GetProjectMediasRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectMediasRequest.Unmarshal(m, b)
}
func (m *GetProjectMediasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectMediasRequest.Marshal(b, m, deterministic)
}
func (m *GetProjectMediasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectMediasRequest.Merge(m, src)
}
func (m *GetProjectMediasRequest) XXX_Size() int {
	return xxx_messageInfo_GetProjectMediasRequest.Size(m)
}
func (m *GetProjectMediasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectMediasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectMediasRequest proto.InternalMessageInfo

func (m *GetProjectMediasRequest) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

type GetOneProjectMedia struct {
	MediaId              int32    `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	ProjectId            int32    `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOneProjectMedia) Reset()         { *m = GetOneProjectMedia{} }
func (m *GetOneProjectMedia) String() string { return proto.CompactTextString(m) }
func (*GetOneProjectMedia) ProtoMessage()    {}
func (*GetOneProjectMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{6}
}

func (m *GetOneProjectMedia) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOneProjectMedia.Unmarshal(m, b)
}
func (m *GetOneProjectMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOneProjectMedia.Marshal(b, m, deterministic)
}
func (m *GetOneProjectMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneProjectMedia.Merge(m, src)
}
func (m *GetOneProjectMedia) XXX_Size() int {
	return xxx_messageInfo_GetOneProjectMedia.Size(m)
}
func (m *GetOneProjectMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneProjectMedia.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneProjectMedia proto.InternalMessageInfo

func (m *GetOneProjectMedia) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

func (m *GetOneProjectMedia) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

type StatusResponse1 struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse1) Reset()         { *m = StatusResponse1{} }
func (m *StatusResponse1) String() string { return proto.CompactTextString(m) }
func (*StatusResponse1) ProtoMessage()    {}
func (*StatusResponse1) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2cef8a9a3cc635, []int{7}
}

func (m *StatusResponse1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse1.Unmarshal(m, b)
}
func (m *StatusResponse1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse1.Marshal(b, m, deterministic)
}
func (m *StatusResponse1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse1.Merge(m, src)
}
func (m *StatusResponse1) XXX_Size() int {
	return xxx_messageInfo_StatusResponse1.Size(m)
}
func (m *StatusResponse1) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse1.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse1 proto.InternalMessageInfo

func (m *StatusResponse1) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StatusResponse1) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StatusResponse1) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

func init() {
	proto.RegisterType((*CreateNewMediaMetadataRequest)(nil), "CreateNewMediaMetadataRequest")
	proto.RegisterType((*MediaMetadataResponseRepeated)(nil), "MediaMetadataResponseRepeated")
	proto.RegisterType((*MediaMetadataResponse)(nil), "MediaMetadataResponse")
	proto.RegisterType((*UpdateMediaRequest)(nil), "UpdateMediaRequest")
	proto.RegisterType((*GetMediaMetadataRequest)(nil), "GetMediaMetadataRequest")
	proto.RegisterType((*GetProjectMediasRequest)(nil), "GetProjectMediasRequest")
	proto.RegisterType((*GetOneProjectMedia)(nil), "GetOneProjectMedia")
	proto.RegisterType((*StatusResponse1)(nil), "StatusResponse1")
}

func init() {
	proto.RegisterFile("proto/media_metadata/mediametadata_service.proto", fileDescriptor_1a2cef8a9a3cc635)
}

var fileDescriptor_1a2cef8a9a3cc635 = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0xc7, 0x49, 0x9c, 0x84, 0x30, 0x14, 0x15, 0x6d, 0x54, 0xba, 0x0a, 0x05, 0x45, 0x3e, 0x45,
	0x3d, 0x18, 0x0a, 0x87, 0xaa, 0xbd, 0x41, 0x3f, 0x50, 0xd4, 0xf0, 0x21, 0xa3, 0x96, 0x23, 0x5a,
	0xe2, 0xe9, 0x92, 0xe2, 0xd8, 0xae, 0x77, 0x4d, 0xc4, 0x73, 0xf4, 0x29, 0xfa, 0x08, 0x7d, 0x91,
	0x3e, 0x4f, 0xb5, 0xbb, 0x71, 0x12, 0x9b, 0xd8, 0x45, 0xe5, 0xda, 0x5b, 0x66, 0xc6, 0xf3, 0xcf,
	0xce, 0xfc, 0x66, 0x67, 0x61, 0x37, 0x8a, 0x43, 0x19, 0xee, 0x8c, 0xd0, 0x1b, 0xb2, 0xcb, 0x11,
	0x4a, 0xe6, 0x31, 0xc9, 0x8c, 0x99, 0x5a, 0x97, 0x02, 0xe3, 0xdb, 0xe1, 0x00, 0x1d, 0xfd, 0x69,
	0x7b, 0x93, 0x87, 0x21, 0xf7, 0x71, 0x47, 0x5b, 0x57, 0xc9, 0xd7, 0x1d, 0x1c, 0x45, 0xf2, 0xce,
	0x04, 0xed, 0x9f, 0x55, 0xd8, 0x7a, 0x17, 0x23, 0x93, 0x78, 0x82, 0xe3, 0x63, 0xa5, 0x72, 0x3c,
	0x51, 0x71, 0xf1, 0x7b, 0x82, 0x42, 0x12, 0x02, 0xb5, 0x80, 0x8d, 0x90, 0x56, 0x3a, 0x95, 0xee,
	0x8a, 0xab, 0x7f, 0x93, 0x36, 0x34, 0xc5, 0x50, 0xe2, 0x89, 0xf2, 0x57, 0xb5, 0x7f, 0x6a, 0x93,
	0x0d, 0x68, 0xf8, 0x18, 0x70, 0x79, 0x4d, 0xad, 0x4e, 0xa5, 0x5b, 0x77, 0x27, 0x96, 0xf2, 0x0b,
	0xc9, 0x64, 0x22, 0x68, 0xcd, 0xf8, 0x8d, 0x45, 0x5e, 0xc0, 0x8a, 0xbc, 0x4e, 0x46, 0x57, 0x01,
	0x1b, 0xfa, 0xb4, 0xae, 0xc5, 0x66, 0x0e, 0x15, 0x8d, 0xe2, 0xf0, 0x1b, 0x0e, 0x64, 0xcf, 0xa3,
	0x0d, 0x9d, 0x38, 0x73, 0x90, 0x5d, 0x68, 0xb1, 0xb1, 0x38, 0x4c, 0x06, 0x37, 0x28, 0x2f, 0xae,
	0x43, 0x1f, 0x75, 0x05, 0x74, 0x59, 0xab, 0x2c, 0x0a, 0x91, 0xb7, 0x40, 0xd9, 0x58, 0x9c, 0xcb,
	0x30, 0x66, 0x5c, 0x9f, 0x77, 0x2e, 0xad, 0xa9, 0xd3, 0x0a, 0xe3, 0xf6, 0x27, 0xd8, 0xca, 0x75,
	0x48, 0x44, 0x61, 0x20, 0xd0, 0xc5, 0x48, 0x35, 0xd0, 0x23, 0x2f, 0xa1, 0xa6, 0xfc, 0xb4, 0xd2,
	0xb1, 0xba, 0xab, 0x7b, 0x1b, 0xce, 0xe2, 0xaf, 0xf5, 0x37, 0xf6, 0x0f, 0x0b, 0x9e, 0x2d, 0x8c,
	0x13, 0x0a, 0xcb, 0x1a, 0x67, 0xcf, 0xd3, 0x3d, 0xaf, 0xbb, 0xa9, 0x39, 0x45, 0x51, 0x2d, 0x40,
	0x61, 0x15, 0xa2, 0xa8, 0x15, 0xa0, 0xa8, 0x17, 0xa3, 0x68, 0x94, 0xa2, 0x58, 0x7e, 0x20, 0x8a,
	0xe6, 0xbf, 0xa1, 0x58, 0x29, 0x47, 0xa1, 0xaa, 0xbe, 0xc1, 0xbb, 0x71, 0x18, 0x7b, 0x82, 0x42,
	0xc7, 0x52, 0x55, 0xa7, 0xb6, 0x3a, 0xe7, 0x40, 0x4f, 0xb4, 0x77, 0x20, 0xe9, 0x6a, 0xa7, 0xd2,
	0xb5, 0xdc, 0x99, 0x43, 0x45, 0x93, 0xc8, 0x9b, 0x44, 0x9f, 0x98, 0xe8, 0xd4, 0x61, 0xff, 0xae,
	0x02, 0xf9, 0xac, 0x2d, 0xfd, 0x3f, 0xe9, 0x1d, 0xf8, 0x8f, 0xe4, 0xef, 0x48, 0x4a, 0xdb, 0x6e,
	0xef, 0xc3, 0xf3, 0x23, 0x94, 0x0b, 0x17, 0x4c, 0x61, 0x73, 0xed, 0xd7, 0x3a, 0xe9, 0xcc, 0x14,
	0xa4, 0x73, 0x45, 0x9a, 0x94, 0xa9, 0xbc, 0x92, 0xab, 0xdc, 0xee, 0x03, 0x39, 0x42, 0x79, 0x1a,
	0xe0, 0x7c, 0x6e, 0x09, 0xc5, 0x8c, 0x5a, 0x35, 0xaf, 0x76, 0x01, 0x4f, 0xcf, 0x35, 0x8d, 0xf4,
	0x8a, 0xbe, 0x32, 0x52, 0x42, 0x30, 0x9e, 0xee, 0xc5, 0xd4, 0x9c, 0x03, 0x59, 0xcd, 0x80, 0x24,
	0x93, 0xdd, 0xa0, 0x06, 0xa2, 0x69, 0x76, 0xc0, 0xde, 0xaf, 0x3a, 0xac, 0x65, 0x5a, 0x42, 0xfa,
	0xb0, 0x1e, 0xe4, 0xf6, 0x30, 0xd9, 0x76, 0x4a, 0x17, 0x74, 0xbb, 0x60, 0xcf, 0xd8, 0x4b, 0xe4,
	0x3d, 0xb4, 0x92, 0xd9, 0x30, 0x4f, 0x05, 0x5b, 0xce, 0xfd, 0x11, 0x2f, 0x51, 0xf9, 0x08, 0xeb,
	0x3c, 0x87, 0x8e, 0x50, 0xa7, 0x80, 0x66, 0x89, 0xce, 0x29, 0xb4, 0x38, 0xca, 0x03, 0xdf, 0xcf,
	0x4a, 0x6d, 0x38, 0xe6, 0x7d, 0x72, 0xd2, 0xf7, 0xc9, 0xf9, 0xa0, 0xde, 0xa7, 0xf6, 0xb6, 0x53,
	0xba, 0x6c, 0xed, 0x25, 0xf2, 0x05, 0x28, 0xcf, 0x8d, 0x47, 0xf6, 0x80, 0x8b, 0x26, 0xe7, 0x01,
	0xba, 0x7d, 0xd8, 0xe4, 0xf7, 0xa6, 0x47, 0xcc, 0xb5, 0xef, 0xfe, 0x6c, 0x95, 0x94, 0xdd, 0x83,
	0x35, 0x8e, 0xb2, 0x3f, 0xbc, 0x35, 0xfd, 0x16, 0x8f, 0x28, 0xd8, 0x74, 0xd0, 0xc8, 0xf4, 0x82,
	0xb3, 0x38, 0xe4, 0x31, 0x8a, 0xc7, 0x08, 0xbe, 0x81, 0x55, 0x0f, 0x7d, 0x9c, 0x8c, 0x42, 0x09,
	0xd5, 0x75, 0x27, 0x77, 0x03, 0x0e, 0x1b, 0x50, 0xe3, 0x71, 0x34, 0xb8, 0x6a, 0xe8, 0x3f, 0xdd,
	0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xba, 0x9c, 0x0d, 0x35, 0x98, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MediaMetadataClient is the client API for MediaMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MediaMetadataClient interface {
	NewMediaMetadata(ctx context.Context, in *CreateNewMediaMetadataRequest, opts ...grpc.CallOption) (*MediaMetadataResponse, error)
	UpdateMediaMetadata(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*MediaMetadataResponse, error)
	GetMediaMetadata(ctx context.Context, in *GetMediaMetadataRequest, opts ...grpc.CallOption) (*MediaMetadataResponse, error)
	GetAllMediaMetadata(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error)
	GetProjectMediasMetadata(ctx context.Context, in *GetProjectMediasRequest, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error)
	GetOneProjectMediasMetadata(ctx context.Context, in *GetOneProjectMedia, opts ...grpc.CallOption) (*MediaMetadataResponse, error)
	GetLiveMedias(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error)
	GetMediasInProgress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error)
	DeleteMedia(ctx context.Context, in *GetMediaMetadataRequest, opts ...grpc.CallOption) (*StatusResponse1, error)
}

type mediaMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaMetadataClient(cc grpc.ClientConnInterface) MediaMetadataClient {
	return &mediaMetadataClient{cc}
}

func (c *mediaMetadataClient) NewMediaMetadata(ctx context.Context, in *CreateNewMediaMetadataRequest, opts ...grpc.CallOption) (*MediaMetadataResponse, error) {
	out := new(MediaMetadataResponse)
	err := c.cc.Invoke(ctx, "/MediaMetadata/newMediaMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) UpdateMediaMetadata(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*MediaMetadataResponse, error) {
	out := new(MediaMetadataResponse)
	err := c.cc.Invoke(ctx, "/MediaMetadata/updateMediaMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetMediaMetadata(ctx context.Context, in *GetMediaMetadataRequest, opts ...grpc.CallOption) (*MediaMetadataResponse, error) {
	out := new(MediaMetadataResponse)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getMediaMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetAllMediaMetadata(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error) {
	out := new(MediaMetadataResponseRepeated)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getAllMediaMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetProjectMediasMetadata(ctx context.Context, in *GetProjectMediasRequest, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error) {
	out := new(MediaMetadataResponseRepeated)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getProjectMediasMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetOneProjectMediasMetadata(ctx context.Context, in *GetOneProjectMedia, opts ...grpc.CallOption) (*MediaMetadataResponse, error) {
	out := new(MediaMetadataResponse)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getOneProjectMediasMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetLiveMedias(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error) {
	out := new(MediaMetadataResponseRepeated)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getLiveMedias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetMediasInProgress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MediaMetadataResponseRepeated, error) {
	out := new(MediaMetadataResponseRepeated)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getMediasInProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) DeleteMedia(ctx context.Context, in *GetMediaMetadataRequest, opts ...grpc.CallOption) (*StatusResponse1, error) {
	out := new(StatusResponse1)
	err := c.cc.Invoke(ctx, "/MediaMetadata/deleteMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaMetadataServer is the server API for MediaMetadata service.
type MediaMetadataServer interface {
	NewMediaMetadata(context.Context, *CreateNewMediaMetadataRequest) (*MediaMetadataResponse, error)
	UpdateMediaMetadata(context.Context, *UpdateMediaRequest) (*MediaMetadataResponse, error)
	GetMediaMetadata(context.Context, *GetMediaMetadataRequest) (*MediaMetadataResponse, error)
	GetAllMediaMetadata(context.Context, *empty.Empty) (*MediaMetadataResponseRepeated, error)
	GetProjectMediasMetadata(context.Context, *GetProjectMediasRequest) (*MediaMetadataResponseRepeated, error)
	GetOneProjectMediasMetadata(context.Context, *GetOneProjectMedia) (*MediaMetadataResponse, error)
	GetLiveMedias(context.Context, *empty.Empty) (*MediaMetadataResponseRepeated, error)
	GetMediasInProgress(context.Context, *empty.Empty) (*MediaMetadataResponseRepeated, error)
	DeleteMedia(context.Context, *GetMediaMetadataRequest) (*StatusResponse1, error)
}

// UnimplementedMediaMetadataServer can be embedded to have forward compatible implementations.
type UnimplementedMediaMetadataServer struct {
}

func (*UnimplementedMediaMetadataServer) NewMediaMetadata(ctx context.Context, req *CreateNewMediaMetadataRequest) (*MediaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMediaMetadata not implemented")
}
func (*UnimplementedMediaMetadataServer) UpdateMediaMetadata(ctx context.Context, req *UpdateMediaRequest) (*MediaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMediaMetadata not implemented")
}
func (*UnimplementedMediaMetadataServer) GetMediaMetadata(ctx context.Context, req *GetMediaMetadataRequest) (*MediaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaMetadata not implemented")
}
func (*UnimplementedMediaMetadataServer) GetAllMediaMetadata(ctx context.Context, req *empty.Empty) (*MediaMetadataResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMediaMetadata not implemented")
}
func (*UnimplementedMediaMetadataServer) GetProjectMediasMetadata(ctx context.Context, req *GetProjectMediasRequest) (*MediaMetadataResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMediasMetadata not implemented")
}
func (*UnimplementedMediaMetadataServer) GetOneProjectMediasMetadata(ctx context.Context, req *GetOneProjectMedia) (*MediaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneProjectMediasMetadata not implemented")
}
func (*UnimplementedMediaMetadataServer) GetLiveMedias(ctx context.Context, req *empty.Empty) (*MediaMetadataResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveMedias not implemented")
}
func (*UnimplementedMediaMetadataServer) GetMediasInProgress(ctx context.Context, req *empty.Empty) (*MediaMetadataResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediasInProgress not implemented")
}
func (*UnimplementedMediaMetadataServer) DeleteMedia(ctx context.Context, req *GetMediaMetadataRequest) (*StatusResponse1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}

func RegisterMediaMetadataServer(s *grpc.Server, srv MediaMetadataServer) {
	s.RegisterService(&_MediaMetadata_serviceDesc, srv)
}

func _MediaMetadata_NewMediaMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewMediaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).NewMediaMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/NewMediaMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).NewMediaMetadata(ctx, req.(*CreateNewMediaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_UpdateMediaMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).UpdateMediaMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/UpdateMediaMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).UpdateMediaMetadata(ctx, req.(*UpdateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetMediaMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetMediaMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetMediaMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetMediaMetadata(ctx, req.(*GetMediaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetAllMediaMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetAllMediaMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetAllMediaMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetAllMediaMetadata(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetProjectMediasMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetProjectMediasMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetProjectMediasMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetProjectMediasMetadata(ctx, req.(*GetProjectMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetOneProjectMediasMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneProjectMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetOneProjectMediasMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetOneProjectMediasMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetOneProjectMediasMetadata(ctx, req.(*GetOneProjectMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetLiveMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetLiveMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetLiveMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetLiveMedias(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetMediasInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetMediasInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetMediasInProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetMediasInProgress(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/DeleteMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).DeleteMedia(ctx, req.(*GetMediaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaMetadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MediaMetadata",
	HandlerType: (*MediaMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "newMediaMetadata",
			Handler:    _MediaMetadata_NewMediaMetadata_Handler,
		},
		{
			MethodName: "updateMediaMetadata",
			Handler:    _MediaMetadata_UpdateMediaMetadata_Handler,
		},
		{
			MethodName: "getMediaMetadata",
			Handler:    _MediaMetadata_GetMediaMetadata_Handler,
		},
		{
			MethodName: "getAllMediaMetadata",
			Handler:    _MediaMetadata_GetAllMediaMetadata_Handler,
		},
		{
			MethodName: "getProjectMediasMetadata",
			Handler:    _MediaMetadata_GetProjectMediasMetadata_Handler,
		},
		{
			MethodName: "getOneProjectMediasMetadata",
			Handler:    _MediaMetadata_GetOneProjectMediasMetadata_Handler,
		},
		{
			MethodName: "getLiveMedias",
			Handler:    _MediaMetadata_GetLiveMedias_Handler,
		},
		{
			MethodName: "getMediasInProgress",
			Handler:    _MediaMetadata_GetMediasInProgress_Handler,
		},
		{
			MethodName: "deleteMedia",
			Handler:    _MediaMetadata_DeleteMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/media_metadata/mediametadata_service.proto",
}
